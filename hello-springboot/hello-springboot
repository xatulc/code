# SpringBoot
## Spring
### Spring注解
#### 1. @Qualifier
1.1 一般是使用@Autowired按照类型注入。当容器中有多个相同类型的bean，框架会抛出NoUniqueBeanDefinitionExceptio异常
```java
public interface Ihandle {
    String chenFormatter();
}

@Component
public class Ahandle implements Ihandle {
    @Override
    public String chenFormatter() {
        return "Ahandle";
    }
}

@Component
public class Bhandle implements Ihandle {
    @Override
    public String chenFormatter() {
        return "Bhandle";
    }
}

@RestController
public class Controller {
    //这里就会报错，required a single bean, but 2 were found
    @Autowired
    private Ihandle ihandle;
}
```
1.2 当Spring容器中有多个相同类型的实列时，为了防止改错误，可以使用@Qualifier，帮助我们选择指定的实例，防止Spring脑裂。  
@Qualifier("ahandle")中的value默认类名或是对应类在@Component或者@Bean注解中声明的value属性标注的名称
```java
public @interface Qualifier {
    String value() default "";
}
```
```java
@RestController
public class Controller {
    
    @Qualifier("ahandle")
    @Autowired
    private Ihandle ihandle;
}
```
1.3 与之相关的还有@Primary注解，出现上述情况，首选实例。
当然@Qualifier 和 @Primary 注释都存在，那么 @Qualifier 注释将具有优先权
```java
@Primary
@Component
public class Ahandle implements Ihandle {
    @Override
    public String chenFormatter() {
        return "Ahandle";
    }
}
```
1.4 当然也可以在使用@Autowired依赖注入时，明确的指定实例的名称。例如指定bhandle实现类  
需要注意@Autowired：
> 在使用@Autowired时，首先在容器中查询对应类型的bean  
如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据  
如果查询的结果不止一个，那么@Autowired会根据名称来查找。  
如果查询的结果为空，那么会抛出异常。解决方法时，使用required=false
```java
@RestController
public class Controller {


    @Autowired
    private Ihandle bhandle;

    @RequestMapping("/formatter")
    public String formatter(){
        return bhandle.chenFormatter();
    }
}


```
## SpringBoot脚手架
### SpringBoot集成kafka
#### 1.快速生成一个SpringBoot项目，引入spring-kafka依赖
```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
<!-- 引入 Spring-Kafka 依赖 -->
<!-- 已经内置 kafka-clients 依赖，所以无需重复引入 -->
<dependency>
    <groupId>org.springframework.kafka</groupId>
    <artifactId>spring-kafka</artifactId>
</dependency>
<!-- 实现对 JSON 的自动化配置 -->
<!-- 因为，Kafka 对复杂对象的 Message 序列化时，我们会使用到 JSON -->
<!--
    同时，spring-boot-starter-json 引入了 spring-boot-starter ，而 spring-boot-starter 又引入了 spring-boot-autoconfigure 。
    spring-boot-autoconfigure 实现了 Spring-Kafka 的自动化配置
 -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-json</artifactId>
</dependency>
```
spring-boot-starter-json如果发送的值需要序列化（对象），则引入
#### 2.
![](images/img.png)

## SpringBoot项目中使用
### 配置文件的优先级

### 读取配置

## 读源码
查询所有的类，双击shift键，进行全局搜索。
* KafkaProperties
```java
@ConfigurationProperties(
    prefix = "spring.kafka"
)
public class KafkaProperties {
    private List<String> bootstrapServers = new ArrayList(Collections.singletonList("localhost:9092"));
    private String clientId;
    private final Map<String, String> properties = new HashMap();
    private final KafkaProperties.Consumer consumer = new KafkaProperties.Consumer();
    private final KafkaProperties.Producer producer = new KafkaProperties.Producer();
    private final KafkaProperties.Admin admin = new KafkaProperties.Admin();
    private final KafkaProperties.Streams streams = new KafkaProperties.Streams();
    private final KafkaProperties.Listener listener = new KafkaProperties.Listener();
    private final KafkaProperties.Ssl ssl = new KafkaProperties.Ssl();
    private final KafkaProperties.Jaas jaas = new KafkaProperties.Jaas();
    private final KafkaProperties.Template template = new KafkaProperties.Template();
    private final KafkaProperties.Security security = new KafkaProperties.Security();
```
在kafkaProperties